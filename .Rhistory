library(tidyverse)
library(tidyverse)
library(xgboost)
df = read.csv("keegans_real_nba_data.csv")
View(df)
relevant_df = df[200:,]
relevant_df = df[[200:,]]
relevant_df = df[[,200:]]
relevant_df = df[[,c(200:)]]
relevant_df = df[[,c(200:nrow(df))]]
relevant_df = df[,c(200:nrow(df))]
relevant_df = df[,c(200:nrow(df))]
relevant_df = df[c(200:nrow(df))]
relevant_df = df[c(200:nrow(df)),]
model_df = df %>% select(game_line, home_ft_pct_L10, home_prev_3, home_prev_5_home,
home_prev_10, home_wins_at_home, home_wins, home_last_ten_wins,
home_last_five_wins, home_last_three_wins, home_points_per_game,
home_points_allowed_per_game, home_ft_pct_on_season, home_fg_pct_on_season,
home_rebounds_on_season, home_personal_fouls_on_season, home_h2h_wins, home_last_ten_ATS,
home_last_five_ATS, home_last_three_ATS, away_wins, away_wins_at_away, away_last_ten_wins,
away_last_five_wins, away_last_three_wins,
away_points_per_game, away_points_allowed_per_game, away_ft_pct_on_season,
away_fg_pct_on_season, away_rebounds_on_season, away_personal_fouls_on_season,
away_h2h_wins, away_last_five_ATS, away_last_three_ATS, away_last_ten_ATS)
model_df = relevant_df %>% select(game_line, home_ft_pct_L10, home_prev_3, home_prev_5_home,
home_prev_10, home_wins_at_home, home_wins, home_last_ten_wins,
home_last_five_wins, home_last_three_wins, home_points_per_game,
home_points_allowed_per_game, home_ft_pct_on_season, home_fg_pct_on_season,
home_rebounds_on_season, home_personal_fouls_on_season, home_h2h_wins, home_last_ten_ATS,
home_last_five_ATS, home_last_three_ATS, away_wins, away_wins_at_away, away_last_ten_wins,
away_last_five_wins, away_last_three_wins,
away_points_per_game, away_points_allowed_per_game, away_ft_pct_on_season,
away_fg_pct_on_season, away_rebounds_on_season, away_personal_fouls_on_season,
away_h2h_wins, away_last_five_ATS, away_last_three_ATS, away_last_ten_ATS)
View(relevant_df)
View(model_df)
View(df)
l
model_df = relevant_df %>% select(game_line, home_ft_pct_L10, home_prev_3, home_prev_5_home,
home_prev_10, home_wins_at_home, home_wins, home_last_ten_wins,
home_last_five_wins, home_last_three_wins, home_points_per_game,
home_points_allowed_per_game, home_ft_pct_on_season, home_fg_pct_on_season,
home_rebounds_on_season, home_personal_fouls_on_season, home_h2h_wins, home_last_ten_ATS,
home_last_five_ATS, home_last_three_ATS, away_wins, away_wins_at_away, away_last_ten_wins,
away_last_five_wins, away_last_three_wins,
away_points_per_game, away_points_allowed_per_game, away_ft_pct_on_season,
away_fg_pct_on_season, away_rebounds_on_season, away_personal_fouls_on_season,
away_h2h_wins, away_last_five_ATS, away_last_three_ATS, away_last_ten_ATS, spread_covered)
set.seed(1236)
folds = createFolds(y =model_df$spread_covered,  k = 5)
library(caret)
library(mlr)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01, max_depth = 8, min_child_weight = 7, subsample = .6, gamma = 0, colsample_bytree = .9)
fold = folds[[1]]
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
params <- list(eta=.01, max_depth = 5, min_child_weight = 7, subsample = .6, gamma = 0, colsample_bytree = .9)
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
params <- list(eta=.01, max_depth = 5, min_child_weight = 7, subsample = .6, gamma = 0, colsample_bytree = .9)
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
ored
pred
bin_pred <- as.numeric(pred > 0)
bin_pred
bin_pred <- as.numeric(pred > .5)
bin_pred
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0))
View(test_w_pred)
print(mean(test_w_pred$right))
set.seed(1236)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01, max_depth = 5, min_child_weight = 7, subsample = .6, gamma = 0, colsample_bytree = .9)
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0))
print(mean(test_w_pred$right))
}
library(SHAPforxgboost)
xgb.plot.shap(data = as.matrix(train %>% select(-spread_covered)), # input data
model = model, # xgboost model
features = colnames(train %>% select(-returns, -abs_return, -time, -log_ret)),
n_col = 3, # layout option
plot_loess = T # add red line to plot
)
xgb.plot.shap(data = as.matrix(train %>% select(-spread_covered)), # input data
model = model, # xgboost model
features = colnames(train %>% select(-spread_covered)),
n_col = 3, # layout option
plot_loess = T # add red line to plot
)
xgb.plot.shap(data = as.matrix(train %>% select(-spread_covered)), # input data
model = model, # xgboost model
features = colnames(train %>% select(-spread_covered)),
plot_loess = T # add red line to plot
)
xgb.plot.shap(data = as.matrix(train %>% select(-spread_covered)), # input data
model = model, # xgboost model
features = colnames(train %>% select(-spread_covered)),
plot_loess = T # add red line to plot
)
shap.plot.summary.wrap1(model, X = as.matrix(train %>% select(-spread_covered)))
set.seed(1234)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
vals = []
set.seed(1234)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0))
acc = c(acc, mean(test_w_pred$right))
}
shap.plot.summary.wrap1(model, X = as.matrix(train %>% select(-spread_covered)))
acc
model_df = relevant_df %>% select(game_line, home_ft_pct_L10, home_prev_3, home_prev_5_home,
home_prev_10, home_last_ten_wins,
home_last_five_wins, home_last_three_wins, home_points_per_game,
home_points_allowed_per_game, home_ft_pct_on_season, home_fg_pct_on_season,
home_rebounds_on_season, home_personal_fouls_on_season, home_h2h_wins, home_last_ten_ATS,
home_last_five_ATS, home_last_three_ATS, away_last_ten_wins,
away_last_five_wins, away_last_three_wins,
away_points_per_game, away_points_allowed_per_game, away_ft_pct_on_season,
away_fg_pct_on_season, away_rebounds_on_season, away_personal_fouls_on_season,
away_h2h_wins, away_last_five_ATS, away_last_three_ATS, away_last_ten_ATS, spread_covered)
set.seed(1234)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0))
acc = c(acc, mean(test_w_pred$right))
}
acc
conf_acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .8)[[1]] | pred < quantile(pred, .2)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
conf_acc
set.seed(123)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .8)[[1]] | pred < quantile(pred, .2)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
conf_acc
set.seed(12)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .8)[[1]] | pred < quantile(pred, .2)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
mean(conf_acc)
mean(acc)
conf_acc
shap.plot.summary.wrap1(model, X = as.matrix(train %>% select(-spread_covered)))
View(model_df)
model_df = relevant_df %>% select(game_line, home_ft_pct_L10,
home_last_five_wins, home_points_per_game,
home_points_allowed_per_game, home_ft_pct_on_season, home_fg_pct_on_season,
home_rebounds_on_season, home_personal_fouls_on_season, home_h2h_wins,
home_last_five_ATS,
away_last_five_wins,
away_points_per_game, away_points_allowed_per_game, away_ft_pct_on_season,
away_fg_pct_on_season, away_rebounds_on_season, away_personal_fouls_on_season,
away_h2h_wins, away_last_five_ATS, spread_covered)
set.seed(12)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .8)[[1]] | pred < quantile(pred, .2)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
mean(conf_acc)
mean(acc)
set.seed(12)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .9)[[1]] | pred < quantile(pred, .1)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
mean(conf_acc)
mean(acc)
set.seed(12)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .9)[[1]] | pred < quantile(pred, .1)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
mean(conf_acc)
mean(acc)
set.seed(1)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .9)[[1]] | pred < quantile(pred, .1)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
mean(conf_acc)
mean(acc)
xgb.plot.shap(data = as.matrix(train %>% select(-spread_covered)), # input data
model = model, # xgboost model
features = colnames(train %>% select(-spread_covered)),
plot_loess = T # add red line to plot
)
shap.plot.summary.wrap1(model, X = as.matrix(train %>% select(-spread_covered)))
set.seed(10)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .9)[[1]] | pred < quantile(pred, .1)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
mean(conf_acc)
mean(acc)
mean(conf_acc)
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .8)[[1]] | pred < quantile(pred, .2)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
mean(conf_acc)
mean(acc)
conf_acc
set.seed(123)
folds = createFolds(y =model_df$spread_covered,  k = 5)
params <- list(eta=.01)
acc = c()
conf_acc = c()
for(fold in folds){
train <- model_df[-fold,]
test <- model_df[fold,]
dtrain = xgb.DMatrix(data = as.matrix(train %>% select(-spread_covered)), label = train$spread_covered)
dtest = xgb.DMatrix(data = as.matrix(test %>% select(-spread_covered)), label = test$spread_covered)
xgbcv <- xgb.cv(params = params, data = dtrain, nrounds = 1000, nfold = 5, showsd = T,
early_stopping_rounds= 20)
model <- xgb.train(params = params, data = dtrain,
nrounds = xgbcv$best_iteration)
pred <- predict(model, dtest)
bin_pred <- as.numeric(pred > .5)
conf <- ifelse((pred > quantile(pred, .8)[[1]] | pred < quantile(pred, .2)[[1]]), 1, 0)
test_w_pred <- test %>%
mutate(right = if_else(bin_pred == spread_covered, 1, 0)) %>%
mutate(conf_right = ifelse(conf==0, -1, ifelse(bin_pred == spread_covered, 1,0)))
confed = test_w_pred %>% filter(conf_right != -1)
acc = c(acc, mean(test_w_pred$right))
conf_acc = c(conf_acc, mean(confed$conf_right))
}
mean(conf_acc)
mean(acc)
